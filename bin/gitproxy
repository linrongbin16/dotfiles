#! /usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright 2018-  <linrongbin16@gmail.com>

import os
import sys
import urllib.parse

import click

HOME = os.path.expanduser("~")
DATABASE = f"{HOME}/.dotfiles/bin/gitproxy.db"
GIT_CONFIG = f"{HOME}/.gitconfig"


def debug(msg):
    print(f"[gitproxy] (Debug) {msg}")


def info(msg):
    print(f"[gitproxy] {msg}")


def err(msg):
    print(f"[gitproxy] Error! {msg}")


def unknown_option():
    err(f"unknown option, please try `{sys.argv[0]} --help` for more information.")


def read_file_by_lines(filename):
    try:
        fp = open(filename, "r")
        lines = fp.readlines()
        fp.close()
        return lines
    except:
        return None


def write_file(filename, content):
    fp = open(filename, "w")
    if isinstance(content, list):
        fp.writelines(content)
    else:
        fp.write(content)
    fp.close()


def append_file(filename, content):
    fp = open(filename, "a+")
    if isinstance(content, list):
        fp.writelines(content)
    else:
        fp.write(content)
    fp.close()


def get_saved_proxies(debug_opt):
    saved_proxies = read_file_by_lines(DATABASE)
    if debug_opt:
        debug(f"{DATABASE}:{saved_proxies}")
    saved_proxies = (
        [p.strip() for p in saved_proxies if isinstance(p, str) and len(p.strip()) > 0]
        if saved_proxies
        else []
    )
    return saved_proxies


def add_proxy(args, debug_opt):
    if debug_opt:
        debug(f"add proxy({type(args)}):{args}")
    if not args:
        err(f"error input '{args}', must be 'NAME=PROTOCOL://domain:port' format.")
        return
    for a in args:
        try:
            if not isinstance(a, str) or len(a.strip()) <= 0:
                continue
            parts = a.strip().split("=")
            name = parts[0].strip()
            url = parts[1].strip()
            parsed_url = urllib.parse.urlparse(url)
            append_file(DATABASE, f"{name}={url}")
            info(f"add proxy '{name}={url}' - done")
        except:
            err("error input '{args}', must be 'NAME=PROTOCOL://domain:port' format.")


def remove_proxy(name, debug_opt):
    if debug_opt:
        debug(f"remove proxy, name:{name}")
    saved_proxies = get_saved_proxies(debug_opt)
    saved = []
    for p in saved_proxies:
        if p.strip().startswith(name):
            info(f"remove proxy '{p.strip()}' - done")
            continue
        saved.append(p.strip() + "\n")
    write_file(DATABASE, saved)


def list_git_config_proxies(debug_opt):
    gitconfigs = read_file_by_lines(GIT_CONFIG)
    if debug_opt:
        print(f"{GIT_CONFIG}:{gitconfigs}")
    current_line = None
    title = None
    proxies = []
    if gitconfigs:
        for i, line in enumerate(gitconfigs):
            current_line = line.strip()
            if debug_opt:
                debug(
                    f"line[{i}]:{current_line}, title:{title}, start with 'proxy':{current_line.startswith('proxy')}"
                )
            if len(current_line) <= 0:
                continue
            if current_line.startswith("[") and current_line.endswith("]"):
                title = current_line[1:-1]
            elif (
                current_line.startswith("proxy")
                and isinstance(title, str)
                and (
                    title.lower().startswith("http")
                    or title.lower().startswith("https")
                )
            ):
                proxies.append(f"{title}={current_line.split('=')[-1].strip()}")
    if len(proxies) > 0:
        info(f"git proxies (~/.gitconfig):")
        for i, p in enumerate(proxies):
            info(f"  {i+1}. {p}")
    else:
        info(f"git proxies (~/.gitconfig): empty")


def list_proxies(debug_opt):
    list_git_config_proxies(debug_opt)

    saved_proxies = get_saved_proxies(debug_opt)
    if isinstance(saved_proxies, list) and len(saved_proxies) > 0:
        info(f"saved proxies (~/.dotfiles/bin/gitproxy.db):")
        for i, p in enumerate(saved_proxies):
            info(f"  {i+1}. {p.strip()}")
    else:
        info(f"saved proxies (~/.dotfiles/bin/gitproxy.db): empty")


def reset_git_proxy():
    os.system("git config --global --unset https.proxy")
    os.system("git config --global --unset http.proxy")
    info(f"reset git proxy (~/.gitconfig) - done")


def find_proxy_by_name(name, debug_opt):
    proxies = get_saved_proxies(debug_opt)
    for proxy in proxies:
        parts = [part.strip() for part in proxy.split("=")]
        if parts[0] == name.strip():
            return parts[1]
    return None


def set_git_proxy(name, debug):
    proxy = find_proxy_by_name(name, debug)
    if not proxy:
        err(f"proxy '{name}' not found, exit...")
        return
    os.system("git config --global --unset https.proxy")
    os.system("git config --global --unset http.proxy")
    http_cmd = f"git config --global http.proxy {proxy}"
    https_cmd = f"git config --global https.proxy {proxy}"
    os.system(http_cmd)
    os.system(https_cmd)
    info(f"set git proxy '{proxy}' (~/.gitconfig) - done")


def print_for_shell(name, debug_opt):
    proxy = find_proxy_by_name(name, debug_opt)
    if not proxy:
        err(f"proxy '{name}' not found, exit...")
        return
    info(
        f"export http_proxy={proxy};export https_proxy={proxy};export ALL_PROXY={proxy}"
    )


def print_for_powershell(name, debug_opt):
    proxy = find_proxy_by_name(name, debug_opt)
    if not proxy:
        err(f"proxy '{name}' not found, exit...")
        return
    info(f'$env:HTTP_PROXY = $env:HTTPS_PROXY = "{proxy}"')


def print_for_command_prompt(name, debug_opt):
    proxy = find_proxy_by_name(name, debug_opt)
    if not proxy:
        print(f"proxy '{name}' not found, exit...")
        return
    info(f'set HTTP_PROXY="{proxy}" && set HTTPS_PROXY="{proxy}"')


@click.command()
@click.option(
    "-a",
    "--add",
    "add_opt",
    is_flag=True,
    help="add proxy in 'name=protocol://domain:port' format",
)
@click.option("-l", "--list", "list_opt", is_flag=True, help="list current git proxy")
@click.option("-r", "--remove", "remove_opt", help="remove proxy by name")
@click.option("--set", "set_opt", help="enable git proxy by name")
@click.option("--reset", "reset_opt", is_flag=True, help="clear git proxy")
@click.option(
    "--sh",
    "sh_opt",
    help="print 'http(s)_proxy' environment variable for linux shell",
)
@click.option(
    "--pwsh",
    "pwsh_opt",
    help="print '$env:HTTP(S)_PROXY' environment variable for windows powershell",
)
@click.option(
    "--cmd",
    "cmd_opt",
    help="print '%HTTP(S)_PROXY%' environment variable for windows command line prompt",
)
@click.option("--debug", "debug_opt", is_flag=True, help="debug")
@click.argument("args", nargs=-1)
def vproxy(
    add_opt,
    list_opt,
    remove_opt,
    set_opt,
    reset_opt,
    sh_opt,
    pwsh_opt,
    cmd_opt,
    debug_opt,
    args,
):
    """
    Git proxy management

    \b
    To add new proxy: `gitproxy -a/--add NAME=PROTOCOL://DOMAIN:PORT`.
    \b
    To list stored proxies: `gitproxy -l/--list`.
    \b
    To remove stored proxy: `gitproxy -r/--remove NAME`.

    \b
    To set/enable git proxy: `gitproxy --set NAME`.
    \b
    To reset/disable git proxy: `gitproxy --reset`.

    \b
    Example:

    \b
    ```
    $ gitproxy -a v2raya=http://127.0.0.1:20171
    [gitproxy] add proxy 'v2raya=http://127.0.0.1:20171' - done

    $ gitproxy -l
    [gitproxy] stored proxies:
    [gitproxy]   1. v2raya=http://127.0.0.1:20171
    [gitproxy] current git proxy (~/.gitconfig):
    [gitproxy]   1. v2raya=http://127.0.0.1:20171

    $ gitproxy --set v2raya
    [gitproxy] set git proxy 'test=socks5://127.0.0.1:7890' (~/.gitconfig) - done
    $ gitproxy --reset
    [gitproxy] reset git proxy (~/.gitconfig) - done
    ```
    """
    if debug_opt:
        print(
            f"add:{add_opt}, list_opt:{list_opt}, remove:{remove_opt}, set_opt:{set_opt}, reset_opt:{reset_opt}, sh_opt:{sh_opt}, pwsh_opt:{pwsh_opt}, cmd_opt:{cmd_opt}, args:{args}, type:{type(args)}"
        )
    if add_opt:
        add_proxy(args, debug_opt)
    elif list_opt:
        list_proxies(debug_opt)
    elif remove_opt:
        remove_proxy(remove_opt, debug_opt)
    elif set_opt:
        set_git_proxy(set_opt, debug_opt)
    elif reset_opt:
        reset_git_proxy()
    elif sh_opt:
        print_for_shell(sh_opt, debug_opt)
    elif pwsh_opt:
        print_for_powershell(pwsh_opt, debug_opt)
    elif cmd_opt:
        print_for_command_prompt(cmd_opt, debug_opt)
    else:
        unknown_option()


if __name__ == "__main__":
    vproxy()
