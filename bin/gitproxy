#! /usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright 2018-  <linrongbin16@gmail.com>

import os
import sys
import urllib.parse

import click
import tinydb

HOME = os.path.expanduser("~")
GIT_CONFIG = f"{HOME}/.gitconfig"
DATABASE_JSON = f"{HOME}/.dotfiles/bin/gitproxydb.json"
DEBUG = False

RELATIVE_GIT_CONFIG=f"~/{os.path.relpath(GIT_CONFIG, HOME)}"
RELATIVE_DATABASE_JSON=f"~/{os.path.relpath(DATABASE_JSON, HOME)}"

def debug(msg):
    if DEBUG:
        print(f"[gitproxy] (debug) {msg}")


def info(msg):
    print(f"[gitproxy] {msg}")


def err(msg):
    print(f"[gitproxy] error! {msg}")


def unknown_option():
    err(f"unknown option, please try `{sys.argv[0]} --help` for more information.")

class Item:
    def __init__(self, name, url):
        self.name = name
        self.url = url

    @staticmethod
    def from_dict(d):
        return Item(d['name'], d['url'])

    def to_dict(self):
        return {'name':self.name, 'url':self.url}

    def __str__(self):
        return f"{self.name}={self.url}"

class DB:
    handle = tinydb.TinyDB(DATABASE_JSON)

    @staticmethod
    def count():
        results = DB.handle.all()
        return len(results)

    @staticmethod
    def all():
        results = DB.handle.all()
        debug(f"{DB}:{results}")
        return [Item.from_dict(i) for i in results]

    @staticmethod
    def first():
        results = DB.handle.all()
        debug(f"{DB}:{results}")
        return Item.from_dict(results[0]) if len(results) > 0 else None

    @staticmethod
    def find(name):
        proxies = DB.all()
        for p in proxies:
            if p.name == name:
                return p
        return None

    @staticmethod
    def remove(name):
        debug(f"remove:{name}")
        Q = tinydb.Query()
        DB.handle.remove(Q.name == name)

    @staticmethod
    def upsert(name, url):
        Q = tinydb.Query()
        old = DB.handle.search(Q.name == name)
        if len(old) > 0:
            DB.handle.update({'name':name, 'url':url}, Q.name==name)
        else:
            DB.handle.insert({'name':name, 'url':url})

def add(add_opt):
    debug(f"add proxy({type(add_opt)}):{add_opt}")
    if not isinstance(add_opt, str) or len(add_opt.strip()) <= 0:
        err(f"error input '{add_opt}', must be 'NAME=PROTOCOL://domain:port' format.")
        return
    try:
        parts = add_opt.strip().split("=")
        name = parts[0].strip()
        url = parts[1].strip()
        urllib.parse.urlparse(url)
        DB.upsert(name, url)
        info(f"add proxy '{name}={url}' - done")
    except:
        err(f"error input '{add_opt}', must be 'NAME=PROTOCOL://domain:port' format.")


def list_gitconfig():
    f = open(GIT_CONFIG)
    lines = f.readlines()
    debug(f"{GIT_CONFIG}:{lines}")
    f.close()
    current_line = None
    title = None
    proxies = []
    if lines:
        for i, line in enumerate(lines):
            current_line = line.strip()
            debug(
                f"line[{i}]:{current_line}, title:{title}, start with 'proxy':{current_line.startswith('proxy')}"
            )
            if len(current_line) <= 0:
                continue
            if current_line.startswith("[") and current_line.endswith("]"):
                title = current_line[1:-1]
            elif (
                current_line.startswith("proxy")
                and isinstance(title, str)
                and (
                    title.lower().startswith("http")
                    or title.lower().startswith("https")
                )
            ):
                proxies.append(f"{title}={current_line.split('=')[-1].strip()}")
    if len(proxies) > 0:
        info(f"git proxies ({RELATIVE_GIT_CONFIG}):")
        for i, p in enumerate(proxies):
            info(f"  {i+1}. {p}")
    else:
        info(f"git proxies ({RELATIVE_GIT_CONFIG}): empty")


def list_all():
    list_gitconfig()

    proxies = DB.all()
    if isinstance(proxies, list) and len(proxies) > 0:
        info(f"stored proxies ({RELATIVE_DATABASE_JSON}):")
        for i, p in enumerate(proxies):
            info(f"  {i+1}. {p}")
    else:
        info(f"stored proxies ({RELATIVE_DATABASE_JSON}): empty")


def reset_gitconfig():
    os.system("git config --global --unset https.proxy")
    os.system("git config --global --unset http.proxy")
    info(f"reset git proxy ({RELATIVE_GIT_CONFIG}) - done")


def set_proxy(name):
    debug(f"set proxy: {name} ({type(name)})")
    p = DB.first() if (DB.count() == 1 and len(name) == 0) else DB.find(name[0])
    if not p:
        err(f"proxy '{name}' not found, exit...")
        return
    os.system("git config --global --unset https.proxy")
    os.system("git config --global --unset http.proxy")
    os.system(f"git config --global http.proxy {p}")
    os.system(f"git config --global https.proxy {p}")
    info(f"set git proxy '{p}' ({RELATIVE_GIT_CONFIG}) - done")


def print_sh(name):
    p = DB.first() if (DB.count() == 1 and len(name) == 0) else DB.find(name[0])
    if not p:
        err(f"proxy '{name}' not found, exit...")
        return
    info(
        f"export http_proxy={p};export https_proxy={p};export ALL_PROXY={p}"
    )


def print_pwsh(name):
    p = DB.first() if (DB.count() == 1 and len(name) == 0) else DB.find(name[0])
    if not p:
        err(f"proxy '{name}' not found, exit...")
        return
    info(f'$env:HTTP_PROXY = $env:HTTPS_PROXY = "{p}"')


def print_cmd(name):
    p = DB.first() if (DB.count() == 1 and len(name) == 0) else DB.find(name[0])
    if not p:
        print(f"proxy '{name}' not found, exit...")
        return
    info(f'set HTTP_PROXY="{p}" && set HTTPS_PROXY="{p}"')



@click.command()
@click.option(
    "-a",
    "--add",
    "add_opt",
    help="add proxy in 'name=protocol://domain:port' format",
)
@click.option(
    "-l", "--list", "list_opt", is_flag=True, help="list saved and git proxies"
)
@click.option("--remove", "remove_opt", help="remove proxy by name")
@click.option("-s", "--set", "set_opt", is_flag=True, help="enable git proxy by name")
@click.option("-r", "--reset", "reset_opt", is_flag=True, help="clear git proxy")
@click.option(
    "--sh",
    "sh_opt",
    is_flag=True, 
    help="print 'http(s)_proxy' environment variable for linux shell",
)
@click.option(
    "--pwsh",
    "pwsh_opt",
    is_flag=True, 
    help="print '$env:HTTP(S)_PROXY' environment variable for windows powershell",
)
@click.option(
    "--cmd",
    "cmd_opt",
    is_flag=True, 
    help="print '%HTTP(S)_PROXY%' environment variable for windows command line prompt",
)
@click.option("--debug", "debug_opt", is_flag=True, help="debug")
@click.argument("args", nargs=-1)
def vproxy(
    add_opt,
    list_opt,
    remove_opt,
    set_opt,
    reset_opt,
    sh_opt,
    pwsh_opt,
    cmd_opt,
    debug_opt,
    args,
):
    """
    Git proxy management
    """

    global DEBUG
    if debug_opt:
        DEBUG = True

    if DEBUG:
        print(
            f"add_opt:{add_opt}, list_opt:{list_opt}, remove:{remove_opt}, set_opt:{set_opt}, reset_opt:{reset_opt}, sh_opt:{sh_opt}, pwsh_opt:{pwsh_opt}, cmd_opt:{cmd_opt}, args:{args}, type:{type(args)}"
        )
    if add_opt:
        add(add_opt)
    elif list_opt:
        list_all()
    elif remove_opt:
        DB.remove(remove_opt)
    elif set_opt:
        set_proxy(args)
    elif reset_opt:
        reset_gitconfig()
    elif sh_opt:
        print_sh(args)
    elif pwsh_opt:
        print_pwsh(args)
    elif cmd_opt:
        print_cmd(args)
    else:
        list_all()


if __name__ == "__main__":
    vproxy()
