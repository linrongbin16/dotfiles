#!/bin/bash

# set -x

OS="$(uname -s)"

GITHUB_ACTIONS=0

for i in "$@"; do
  case $i in
  --github-actions)
    GITHUB_ACTIONS=1
    ;;
  *) ;;
  esac
done

# utils {

info() {
  local content="$*"
  printf "[dotfiles] - %s\n" "$content"
}

skip_info() {
  local old="$IFS"
  IFS='/'
  local target="'$*'"
  info "$target already exist, skip..."
  IFS=$old
}

install() {
  local command="$1"
  local target="$2"
  if ! type "$target" >/dev/null 2>&1; then
    info "install '$target' with: '$command'"
    eval "$command"
  else
    skip_info $target
  fi
}

# utils }

# apt {

install_nvim() {
  bob use stable
}

install_nodejs_for_apt() {
  # https://github.com/nodesource/distributions
  info "install nodejs-lts from github NodeSource"
  sudo apt-get install -y curl
  curl -fsSL https://deb.nodesource.com/setup_lts.x -o nodesource_setup.sh
  sudo -E bash nodesource_setup.sh
  sudo apt-get -qq update
  sudo apt-get -qq -y install nodejs
}

install_git_for_apt() {
  sudo apt-add-repository ppa:git-core/ppa
  sudo apt-get -q -q -y update
  install "sudo apt-get install -q -y git" "git"
}

install_golang() {
  git clone --depth=1 https://github.com/kerolloz/go-installer
  export GOROOT="$HOME/.go" # where go is installed
  export GOPATH="$HOME/go"  # user workspace
  bash ./go-installer/go.sh
  export PATH="$PATH:$GOROOT/bin"
  export PATH="$PATH:$GOPATH/bin"
}

install_lazygit_for_apt() {
  local LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | \grep -Po '"tag_name": *"v\K[^"]*')
  curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/download/v${LAZYGIT_VERSION}/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
  tar xf lazygit.tar.gz lazygit
  sudo install lazygit -D -t /usr/local/bin/
}

_install_fzf_impl() {
  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
  ~/.fzf/install --bin
  export PATH=$PATH:~/.fzf/bin
}

install_fzf() {
  install "_install_fzf_impl" "fzf"
}

install_moar() {
  go install github.com/walles/moar@latest
}

apt_depends() {
  info "install dependencies with apt"
  sudo apt-get -q -y update

  install "sudo apt-get install -q -y build-essential" "gcc"
  install "sudo apt-get install -q -y build-essential" "make"
  install "sudo apt-get install -q -y autoconf" "autoconf"
  install "sudo apt-get install -q -y automake" "automake"
  install "sudo apt-get install -q -y pkg-config" "pkg-config"
  install "sudo apt-get install -q -y cmake" "cmake"
  install "install_golang" "go"

  install "install_git_for_apt" "git"
  install "sudo apt-get install -q -y curl" "curl"
  install "sudo apt-get install -q -y wget" "wget"
  install "install_lazygit_for_apt" "lazygit"
  install "install_moar" "moar"

  install "sudo apt-get install -q -y gzip" "gzip"
  install "sudo apt-get install -q -y p7zip" "7z"
  install "sudo apt-get install -q -y unzip" "unzip"

  install "sudo apt-get install -q -y xsel" "xsel"
  install "sudo apt-get install -q -y xclip" "xclip"

  install "sudo apt-get install -q -y python3 python3-dev python3-venv python3-pip python3-docutils" "python3"
  install "sudo apt-get install -q -y python3 python3-dev python3-venv python3-pip python3-docutils" "pip3"

  install "install_nodejs_for_apt" "node"
  install "install_nodejs_for_apt" "npm"

  install "sudo apt-get install pipx" "pipx"
  pipx ensurepath
  sudo pipx ensurepath --global

  install "sudo apt-get install -q -y zsh" "zsh"
  sudo chsh -s $(which zsh) $USER
}

# apt }

# pacman {

pacman_depends() {
  info "install dependencies with pacman"
  sudo pacman -Syy

  install "yes | sudo pacman -S base-devel" "gcc"
  install "yes | sudo pacman -S base-devel" "make"
  install "yes | sudo pacman -S autoconf" "autoconf"
  install "yes | sudo pacman -S automake" "automake"
  install "yes | sudo pacman -S pkg-config" "pkg-config"
  install "yes | sudo pacman -S cmake" "cmake"
  install "yes | sudo pacman -S go" "go"

  install "yes | sudo pacman -S git" "git"
  install "yes | sudo pacman -S curl" "curl"
  install "yes | sudo pacman -S wget" "wget"
  install "yes | sudo pacman -S lazygit" "lazygit"
  install "yes | sudo pacman -S fzf" "fzf"
  install "yes | sudo pacman -S moar" "moar"

  install "yes | sudo pacman -S unzip" "unzip"
  install "yes | sudo pacman -S gzip" "gzip"
  install "yes | sudo pacman -S p7zip" "7z"
  install "yes | sudo pacman -S atool" "atool"

  install "yes | sudo pacman -S xsel" "xsel"
  install "yes | sudo pacman -S xclip" "xclip"

  install "yes | sudo pacman -S python python-pip" "python3"

  install "yes | sudo pacman -S nodejs npm" "node"

  install "yes | sudo pacman -S python-pipx" "pipx"
  pipx ensurepath
  sudo pipx ensurepath --global

  install "yes | sudo pacman -S zsh" "zsh"
  sudo chsh -s $(which zsh) $USER
}

# pacman }

# dnf {

install_lazygit_for_dnf() {
  sudo dnf copr enable atim/lazygit -y
  sudo dnf install -y lazygit
}

dnf_depends() {
  info "install dependencies with dnf"
  sudo dnf check-update

  install "sudo dnf group install -y \"Development Tools\"" "gcc"
  install "sudo dnf group install -y \"Development Tools\"" "make"
  install "sudo dnf install -y autoconf" "autoconf"
  install "sudo dnf install -y automake" "automake"
  install "sudo dnf install -y pkg-config" "pkg-config"
  install "sudo dnf install -y cmake" "cmake"
  install "install_golang" "go"

  install "sudo dnf install -y git" "git"
  install "sudo dnf install -y curl" "curl"
  install "sudo dnf install -y wget" "wget"
  install "install_lazygit_for_dnf" "lazygit"
  install "install_moar" "moar"

  install "sudo dnf install -y gzip" "gzip"
  install "sudo dnf install -y p7zip" "7z"
  install "sudo dnf install -y unzip" "unzip"

  install "sudo dnf install -y xsel" "xsel"
  install "sudo dnf install -y xclip" "xclip"

  install "sudo dnf install -y python3 python3-devel python3-pip python3-docutils" "python3"

  install "sudo dnf install -y nodejs npm" "node"

  install "sudo dnf install -y neovim" "nvim"
  install "sudo dnf install -y zsh" "zsh"
  install "sudo dnf install -y pipx" "pipx"
  pipx ensurepath
  sudo pipx ensurepath --global
}

# dnf }

# brew {

brew_depends() {
  info "install dependencies with brew"

  install "xcode-select --install" "clang"
  install "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"" "brew"
  brew update

  install "brew install autoconf" "autoconf"
  install "brew install automake" "automake"
  install "brew install pkg-config" "pkg-config"
  install "brew install cmake" "cmake"
  install "brew install go" "go"

  install "brew install git" "git"
  install "brew install curl" "curl"
  install "brew install wget" "wget"
  install "brew install jesseduffield/lazygit/lazygit" "lazygit"
  install "brew install fzf" "fzf"
  install "brew install moar" "moar"

  install "brew install gzip" "gzip"
  install "brew install p7zip" "7z"
  install "brew install unzip" "unzip"

  install "brew install python3" "python3"
  install "brew install node" "node"

  install "brew install neovim" "nvim"
  install "brew install zsh" "zsh"
  install "brew install pipx" "pipx"
  pipx ensurepath
  sudo pipx ensurepath --global
}

# brew }

# install dependencies

case "$OS" in
Linux)
  if [ -f "/etc/arch-release" ] || [ -f "/etc/artix-release" ]; then
    pacman_depends
  elif [ -f "/etc/fedora-release" ] || [ -f "/etc/redhat-release" ]; then
    dnf_depends
  elif [ -f "/etc/gentoo-release" ]; then
    # emerge
    info "gentoo is not supported, exit..."
    exit 1
  else
    apt_depends
  fi
  ;;
FreeBSD)
  # pkg
  info "FreeBSD is not supported, exit..."
  exit 1
  ;;
NetBSD)
  # pkgin
  info "NetBSD is not supported, exit..."
  exit 1
  ;;
OpenBSD)
  # pkg_add
  info "OpenBSD is not supported, exit..."
  exit 1
  ;;
Darwin)
  brew_depends
  ;;
*)
  info "$OS is not supported, exit..."
  exit 1
  ;;
esac

# git config
git config --global user.email "linrongbin16@outlook.com"
git config --global user.name "linrongbin16"
git config --global pull.rebase false
git config --global init.defaultBranch main

# rust
install "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y" "cargo"
install "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y" "rustc"
if [ -f $HOME/.cargo/env ]; then
  . "$HOME/.cargo/env"
fi
install "cargo install fd-find" "fd"
install "cargo install ripgrep" "rg"
install "cargo install --locked bat" "bat"
install "cargo install eza" "eza"
install "cargo install git-delta" "delta"
install "cargo install --locked zoxide" "zoxide"
install "cargo install bob-nvim" "bob"

# python3

python_has_pep668=$(python3 -c 'import sys; major=sys.version_info.major; minor=sys.version_info.minor; micro=sys.version_info.micro; r1=major >= 3 and minor > 11; r2=major >= 3 and minor == 11 and micro >= 1; print(1 if r1 or r2 else 0)')
if [ $GITHUB_ACTIONS -eq 1 ]; then
  python3 --version
fi

if [[ $python_has_pep668 -eq 1 ]]; then
  python3 -m pip install click --user --break-system-packages
  python3 -m pip install tinydb --user --break-system-packages
  python3 -m pip install pynvim --user --break-system-packages
else
  python3 -m pip install click --user
  python3 -m pip install tinydb --user
  python3 -m pip install pynvim --user
fi

# node.js
sudo npm install --silent -g neovim
sudo npm install --silent -g trash-cli

# release tag
github_latest_tag() {
  local repo="$1"
  local uri="https://github.com/$repo/releases/latest"
  curl -f -L $uri | grep "href=\"/$repo/releases/tag" | grep -Eo 'href="/[a-zA-Z0-9#~.*,/!?=+&_%:-]*"' | head -n 1 | cut -d '"' -f2 | cut -d "/" -f6
}

install_font_from_github() {
  local repo=$1
  local artifact=$2
  local artifact_version=$(github_latest_tag "$repo")
  local artifact_url="https://github.com/$repo/releases/download/$artifact_version/$artifact"
  info "install $artifact($artifact_version) font from github"
  if [ -f $artifact ]; then
    rm -rf $artifact
  fi
  curl -L $artifact_url -o $artifact
  if [ $? -ne 0 ]; then
    info "failed to download $artifact, skip..."
  else
    unzip -o $artifact
    rm $artifact
    info "install $artifact($artifact_version) nerd font from github - done"
  fi
}

install_font_from_github_for_linux() {
  mkdir -p ~/.local/share/fonts && cd ~/.local/share/fonts
  install_font_from_github "$1" "$2"
  sudo fc-cache -f -v
}

install_font_from_github_for_macos() {
  cd ~/Library/Fonts
  install_font_from_github "$1" "$2"
}

if [ "$OS" = "Darwin" ]; then
  install_font_from_github_for_macos "thep0y/monaco-nerd-font" "MonacoNerdFont.zip"
  install_font_from_github_for_macos "thep0y/monaco-nerd-font" "MonacoNerdFontMono.zip"
  # brew install "font-hack-nerd-font"
  # brew install "font-d2coding-nerd-font"
  # brew install "font-sauce-code-pro-nerd-font"
  # brew install "font-recursive-mono-nerd-font"
  # brew install "font-caskaydia-mono-nerd-font"
else
  install_font_from_github_for_linux "thep0y/monaco-nerd-font" "MonacoNerdFont.zip"
  install_font_from_github_for_linux "thep0y/monaco-nerd-font" "MonacoNerdFontMono.zip"
  # install_font_from_github_for_linux "ryanoasis/nerd-fonts" "Hack.zip"
  # install_font_from_github_for_linux "ryanoasis/nerd-fonts" "D2Coding.zip"
  # install_font_from_github_for_linux "ryanoasis/nerd-fonts" "SourceCodePro.zip"
  # install_font_from_github_for_linux "ryanoasis/nerd-fonts" "Recursive.zip"
  # install_font_from_github_for_linux "ryanoasis/nerd-fonts" "CascadiaCode.zip"
  # install_font_from_github_for_linux "ryanoasis/nerd-fonts" "CascadiaMono.zip"
fi

# fzf-tab
install_fzf_tab_for_zsh() {
  if [ -d "$HOME/.zsh/fzf-tab" ]; then
    rm -rf "$HOME/.zsh/fzf-tab"
  fi
  git clone --depth=1 https://github.com/Aloxaf/fzf-tab "$HOME/.zsh/fzf-tab"
}

# pure prompt
install_pure_for_zsh() {
  mkdir -p "$HOME/.zsh"
  if [ -d "$HOME/.zsh/pure" ]; then
    rm -rf "$HOME/.zsh/pure"
  fi
  git clone --depth=1 https://github.com/sindresorhus/pure.git "$HOME/.zsh/pure"
}

# spaceship prompt
install_spaceship_for_zsh() {
  mkdir -p "$HOME/.zsh"
  if [ -d "$HOME/.zsh/spaceship" ]; then
    rm -rf "$HOME/.zsh/spaceship"
  fi
  git clone --depth=1 https://github.com/spaceship-prompt/spaceship-prompt.git "$HOME/.zsh/spaceship"
}

install_fzf_tab_for_zsh
install_pure_for_zsh

# atuin
curl --proto '=https' --tlsv1.2 -LsSf https://setup.atuin.sh | sh

# mise
curl https://mise.run | sh

# kitty config
mkdir -p $HOME/.config/kitty
if [ ! -f ~/.config/kitty/kitty.conf ]; then
  cp $HOME/.dotfiles/kitty.conf $HOME/.config/kitty/kitty.conf
fi

# alacritty
mkdir -p $HOME/.config/alacritty
if [ ! -f ~/.config/alacritty/alacritty.toml ]; then
  cp $HOME/.dotfiles/alacritty.toml $HOME/.config/alacritty/alacritty.toml
fi
if [ -d "$HOME/.config/alacritty/themes" ]; then
  rm -rf "$HOME/.config/alacritty/themes"
fi
git clone --depth=1 https://github.com/alacritty/alacritty-theme ~/.config/alacritty/themes

echo '' >>~/.zshrc
echo '# dotfiles ' >>~/.zshrc
echo '[ -f ~/.dotfiles/dotfiles.zsh ] && source ~/.dotfiles/dotfiles.zsh' >>~/.zshrc
