#!/bin/bash

# set -x

OS="$(uname -s)"

IS_LINUX=0
IS_MAC=0
case "$OS" in
Linux)
  IS_LINUX=1
  ;;
Darwin)
  IS_MAC=1
  ;;
*)
  # Nothing
  ;;
esac

export DOTFILES_HOME="$HOME/.dotfiles"

# utils {

info() {
  local content="$*"
  printf "[dotfiles] - %s\n" "$content"
}

skip_info() {
  local old="$IFS"
  IFS='/'
  local target="'$*'"
  info "$target already exist, skip..."
  IFS=$old
}

install() {
  local command="$1"
  local target="$2"
  if ! type "$target" >/dev/null 2>&1; then
    info "install '$target' with: '$command'"
    eval "$command"
  else
    skip_info $target
  fi
}

# utils }

core_deps() {
  case "$OS" in
  Linux)
    if [ -f "/etc/arch-release" ] || [ -f "/etc/artix-release" ]; then
      . "$DOTFILES_HOME/inst/pacman.sh"
    elif [ -f "/etc/fedora-release" ] || [ -f "/etc/redhat-release" ]; then
      . "$DOTFILES_HOME/inst/dnf.sh"
    else
      . "$DOTFILES_HOME/inst/apt.sh"
    fi
    ;;
  Darwin)
    . "$DOTFILES_HOME/inst/brew.sh"
    ;;
  *)
    info "$OS is not supported, exit..."
    exit 1
    ;;
  esac
}

# git config
git config --global user.email "linrongbin16@outlook.com"
git config --global user.name "linrongbin16"
git config --global pull.rebase false
git config --global init.defaultBranch main

# bun/deno
install_bun_deno_deps() {
  install "install_deno" "deno"
  install "install_bun" "bun"
}

install_bun_deno_deps

# golang
install_go_deps() {
  install "install_fzf" "fzf"
  install "install_moar" "moar"
  install "install_gtrash" "gtrash"
}

install_go_deps

# rust
install_rust_deps() {
  install "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y" "cargo"
  install "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y" "rustc"
  if [ -f $HOME/.cargo/env ]; then
    . "$HOME/.cargo/env"
  fi
  install "cargo install fd-find" "fd"
  install "cargo install ripgrep" "rg"
  install "cargo install --locked bat" "bat"
  install "cargo install eza" "eza"
  install "cargo install --locked zoxide" "zoxide"
  install "cargo install --locked rmz" "rmz"
  install "cargo install --locked cpz" "cpz"
  install "cargo install --git https://github.com/MordechaiHadad/bob --locked" "bob"
  export PATH="$PATH:$HOME/.local/share/bob/nvim-bin"
  install "bob use stable" "nvim"
}

install_rust_deps

# agkozak prompt
install_prompt() {
  mkdir -p "$HOME/.zsh"
  if [ ! -d "$HOME/.zsh/agkozak-zsh-prompt" ]; then
    git clone --depth=1 https://github.com/agkozak/agkozak-zsh-prompt "$HOME/.zsh/agkozak-zsh-prompt"
  fi
}

install_prompt

# atuin
curl --proto '=https' --tlsv1.2 -LsSf https://setup.atuin.sh | sh

# mise
curl https://mise.run | sh

# alacritty
mkdir -p $HOME/.config/alacritty
if [ ! -f ~/.config/alacritty/alacritty.toml ]; then
  cp $HOME/.dotfiles/alacritty.toml $HOME/.config/alacritty/alacritty.toml
fi
if [ ! -d "$HOME/.config/alacritty/themes" ]; then
  git clone --depth=1 https://github.com/alacritty/alacritty-theme ~/.config/alacritty/themes
fi

echo '' >>~/.zshrc
echo '# dotfiles ' >>~/.zshrc
echo '[ -f ~/.dotfiles/dotfiles.zsh ] && source ~/.dotfiles/dotfiles.zsh' >>~/.zshrc
echo '[dotfiles] Done'
