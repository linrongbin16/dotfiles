#!/bin/bash

# set -x

OS="$(uname -s)"

IS_LINUX=0
IS_MAC=0
IS_FREEBSD=0
IS_NETBSD=0
IS_OPENBSD=0
case "$OS" in
Linux)
  IS_LINUX=1
  ;;
FreeBSD)
  IS_FREEBSD=1
  ;;
NetBSD)
  IS_NETBSD=1
  ;;
OpenBSD)
  IS_OPENBSD=1
  ;;
Darwin)
  IS_MAC=1
  ;;
*)
  # Nothing
  ;;
esac

export DOTFILES_HOME="$HOME/.dotfiles"

# utils {

info() {
  local content="$*"
  printf "[dotfiles] - %s\n" "$content"
}

skip_info() {
  local old="$IFS"
  IFS='/'
  local target="'$*'"
  info "$target already exist, skip..."
  IFS=$old
}

install() {
  local command="$1"
  local target="$2"
  if ! type "$target" >/dev/null 2>&1; then
    info "install '$target' with: '$command'"
    eval "$command"
  else
    skip_info $target
  fi
}

# utils }

# pacman {

# pacman }

# dnf {

dnf_install_lazygit() {
  sudo dnf copr enable dejan/lazygit
  sudo dnf install -y lazygit
}

dnf_depends() {
  info "install dependencies with dnf"
  sudo dnf check-update

  install "sudo dnf group install -y \"Development Tools\"" "gcc"
  install "sudo dnf group install -y \"Development Tools\"" "make"
  install "sudo dnf install -y autoconf" "autoconf"
  install "sudo dnf install -y automake" "automake"
  install "sudo dnf install -y pkg-config" "pkg-config"
  install "sudo dnf install -y cmake" "cmake"
  install "install_golang" "go"
  sudo dnf install -y openssl-devel openssl openssh-clients openssh-server
  sudo dnf install -y cmake freetype-devel fontconfig-devel libxcb-devel libxkbcommon-devel g++

  install "sudo dnf install -y git" "git"
  install "sudo dnf install -y curl" "curl"
  install "sudo dnf install -y wget" "wget"

  install "sudo dnf install -y gzip" "gzip"
  install "sudo dnf install -y p7zip" "7z"
  install "sudo dnf install -y unzip" "unzip"

  install "sudo dnf install -y xsel" "xsel"
  install "sudo dnf install -y xclip" "xclip"

  install "sudo dnf install -y python3 python3-devel python3-pip python3-docutils" "python3"

  install "sudo dnf install -y nodejs npm" "node"

  install "sudo dnf install -y go" "go"
  install "dnf_install_lazygit" "lazygit"

  install "sudo dnf install -y pipx" "pipx"
  pipx ensurepath
  sudo pipx ensurepath --global

  install "sudo dnf install -y zsh" "zsh"
  sudo chsh -s $(which zsh) $USER
}

# dnf }

# brew {

brew_depends() {
  info "install dependencies with brew"

  install "xcode-select --install" "clang"
  install "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"" "brew"
  brew update

  install "brew install autoconf" "autoconf"
  install "brew install automake" "automake"
  install "brew install pkg-config" "pkg-config"
  install "brew install cmake" "cmake"
  brew install openssl openssh

  install "brew install git" "git"
  install "brew install curl" "curl"
  install "brew install wget" "wget"

  install "brew install gzip" "gzip"
  install "brew install p7zip" "7z"
  install "brew install unzip" "unzip"
  install "brew install alacritty" "alacritty"

  install "brew install python3" "python3"
  install "brew install node" "node"
  install "brew install deno" "deno"
  install "brew install oven-sh/bun/bun" "bun"

  install "brew install go" "go"
  install "brew install jesseduffield/lazygit/lazygit" "lazygit"
  install "brew install fzf" "fzf"
  install "brew install moar" "moar"
  install "brew install trash" "/opt/homebrew/opt/trash/bin/trash"

  install "brew install pipx" "pipx"
  pipx ensurepath
  sudo pipx ensurepath --global

  install "brew install zsh" "zsh"
  sudo chsh -s $(which zsh) $USER
}

# brew }

# install dependencies

case "$OS" in
Linux)
  if [ -f "/etc/arch-release" ] || [ -f "/etc/artix-release" ]; then
    pacman_depends
  elif [ -f "/etc/fedora-release" ] || [ -f "/etc/redhat-release" ]; then
    dnf_depends
  elif [ -f "/etc/gentoo-release" ]; then
    # emerge
    info "gentoo is not supported, exit..."
    exit 1
  else
    apt_depends
  fi
  ;;
FreeBSD)
  # pkg
  info "FreeBSD is not supported, exit..."
  exit 1
  ;;
NetBSD)
  # pkgin
  info "NetBSD is not supported, exit..."
  exit 1
  ;;
OpenBSD)
  # pkg_add
  info "OpenBSD is not supported, exit..."
  exit 1
  ;;
Darwin)
  brew_depends
  ;;
*)
  info "$OS is not supported, exit..."
  exit 1
  ;;
esac

# git config
git config --global user.email "linrongbin16@outlook.com"
git config --global user.name "linrongbin16"
git config --global pull.rebase false
git config --global init.defaultBranch main

# bun/deno
install_bun_deno_deps() {
  install "install_deno" "deno"
  install "install_bun" "bun"
}

install_bun_deno_deps

# golang
install_go_deps() {
  install "install_fzf" "fzf"
  install "install_moar" "moar"
  install "install_gtrash" "gtrash"
}

install_go_deps

# rust
install_rust_deps() {
  install "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y" "cargo"
  install "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y" "rustc"
  if [ -f $HOME/.cargo/env ]; then
    . "$HOME/.cargo/env"
  fi
  install "cargo install fd-find" "fd"
  install "cargo install ripgrep" "rg"
  install "cargo install --locked bat" "bat"
  install "cargo install eza" "eza"
  install "cargo install --locked zoxide" "zoxide"
  install "cargo install --locked rmz" "rmz"
  install "cargo install --locked cpz" "cpz"
  install "cargo install --git https://github.com/MordechaiHadad/bob --locked" "bob"
  export PATH="$PATH:$HOME/.local/share/bob/nvim-bin"
  install "bob use stable" "nvim"
}

install_rust_deps

# agkozak prompt
install_prompt() {
  mkdir -p "$HOME/.zsh"
  if [ ! -d "$HOME/.zsh/agkozak-zsh-prompt" ]; then
    git clone --depth=1 https://github.com/agkozak/agkozak-zsh-prompt "$HOME/.zsh/agkozak-zsh-prompt"
  fi
}

install_prompt

# atuin
curl --proto '=https' --tlsv1.2 -LsSf https://setup.atuin.sh | sh

# mise
curl https://mise.run | sh

# alacritty
mkdir -p $HOME/.config/alacritty
if [ ! -f ~/.config/alacritty/alacritty.toml ]; then
  cp $HOME/.dotfiles/alacritty.toml $HOME/.config/alacritty/alacritty.toml
fi
if [ ! -d "$HOME/.config/alacritty/themes" ]; then
  git clone --depth=1 https://github.com/alacritty/alacritty-theme ~/.config/alacritty/themes
fi

echo '' >>~/.zshrc
echo '# dotfiles ' >>~/.zshrc
echo '[ -f ~/.dotfiles/dotfiles.zsh ] && source ~/.dotfiles/dotfiles.zsh' >>~/.zshrc
echo '[dotfiles] Done'
