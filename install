#!/bin/bash

# set -x

OS="$(uname -s)"

# utils {

info() {
  local content="$*"
  printf "[dotfiles] - %s\n" "$content"
}

skip_info() {
  local old="$IFS"
  IFS='/'
  local target="'$*'"
  info "$target already exist, skip..."
  IFS=$old
}

install() {
  local command="$1"
  local target="$2"
  if ! type "$target" >/dev/null 2>&1; then
    info "install '$target' with: '$command'"
    eval "$command"
  else
    skip_info $target
  fi
}

# utils }

# apt {

install_nodejs_for_apt() {
  # https://github.com/nodesource/distributions
  info "install nodejs-lts from github NodeSource"
  sudo apt-get install -y curl
  curl -fsSL https://deb.nodesource.com/setup_lts.x -o nodesource_setup.sh
  sudo -E bash nodesource_setup.sh
  sudo apt-get -qq update
  sudo apt-get -qq -y install nodejs
}

install_git_for_apt() {
  sudo apt-add-repository ppa:git-core/ppa
  sudo apt-get -q -q -y update
  install "sudo apt-get install -q -y git" "git"
}

install_golang() {
  git clone --depth=1 https://github.com/kerolloz/go-installer
  export GOROOT="$HOME/.go" # where go is installed
  export GOPATH="$HOME/go"  # user workspace
  bash ./go-installer/go.sh
  export PATH="$PATH:$GOROOT/bin"
  export PATH="$PATH:$GOPATH/bin"
}

install_lazygit_for_apt() {
  local LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | \grep -Po '"tag_name": *"v\K[^"]*')
  curl -Lo lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/download/v${LAZYGIT_VERSION}/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz"
  tar xf lazygit.tar.gz lazygit
  sudo install lazygit -D -t /usr/local/bin/
}

install_fzf() {
  git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
  ~/.fzf/install --bin
  export PATH=$PATH:~/.fzf/bin
}

install_moar() {
  go install github.com/walles/moar@latest
}

apt_depends() {
  info "install dependencies with apt"
  sudo apt-get -q -y update

  install "sudo apt-get install -q -y build-essential" "gcc"
  install "sudo apt-get install -q -y build-essential" "make"
  install "sudo apt-get install -q -y autoconf" "autoconf"
  install "sudo apt-get install -q -y automake" "automake"
  install "sudo apt-get install -q -y pkg-config" "pkg-config"
  install "sudo apt-get install -q -y cmake" "cmake"
  install "install_golang" "go"
  sudo apt-get install -q -y libssl-dev openssl openssh-client openssh-server

  install "install_git_for_apt" "git"
  install "sudo apt-get install -q -y curl" "curl"
  install "sudo apt-get install -q -y wget" "wget"
  install "install_lazygit_for_apt" "lazygit"
  install "install_fzf" "fzf"
  install "install_moar" "moar"

  install "sudo apt-get install -q -y gzip" "gzip"
  install "sudo apt-get install -q -y p7zip" "7z"
  install "sudo apt-get install -q -y unzip" "unzip"

  install "sudo apt-get install -q -y xsel" "xsel"
  install "sudo apt-get install -q -y xclip" "xclip"

  install "sudo apt-get install -q -y python3 python3-dev python3-venv python3-pip python3-docutils" "python3"
  install "sudo apt-get install -q -y python3 python3-dev python3-venv python3-pip python3-docutils" "pip3"

  install "install_nodejs_for_apt" "node"
  install "install_nodejs_for_apt" "npm"

  install "sudo apt-get install pipx" "pipx"
  pipx ensurepath
  sudo pipx ensurepath --global

  install "sudo apt-get install -q -y zsh" "zsh"
  sudo chsh -s $(which zsh) $USER
}

# apt }

# pacman {

pacman_depends() {
  info "install dependencies with pacman"
  sudo pacman -Syy

  install "yes | sudo pacman -S base-devel" "gcc"
  install "yes | sudo pacman -S base-devel" "make"
  install "yes | sudo pacman -S autoconf" "autoconf"
  install "yes | sudo pacman -S automake" "automake"
  install "yes | sudo pacman -S pkg-config" "pkg-config"
  install "yes | sudo pacman -S cmake" "cmake"
  install "yes | sudo pacman -S go" "go"
  yes | sudo pacman -S libssl openssl openssh

  install "yes | sudo pacman -S git" "git"
  install "yes | sudo pacman -S curl" "curl"
  install "yes | sudo pacman -S wget" "wget"
  install "yes | sudo pacman -S lazygit" "lazygit"
  install "yes | sudo pacman -S fzf" "fzf"
  install "yes | sudo pacman -S moar" "moar"

  install "yes | sudo pacman -S unzip" "unzip"
  install "yes | sudo pacman -S gzip" "gzip"
  install "yes | sudo pacman -S p7zip" "7z"
  install "yes | sudo pacman -S atool" "atool"

  install "yes | sudo pacman -S xsel" "xsel"
  install "yes | sudo pacman -S xclip" "xclip"

  install "yes | sudo pacman -S python python-pip" "python3"

  install "yes | sudo pacman -S nodejs npm" "node"

  install "yes | sudo pacman -S python-pipx" "pipx"
  pipx ensurepath
  sudo pipx ensurepath --global

  install "yes | sudo pacman -S zsh" "zsh"
  sudo chsh -s $(which zsh) $USER
}

# pacman }

# dnf {

install_lazygit_for_dnf() {
  sudo dnf copr enable atim/lazygit -y
  sudo dnf install -y lazygit
}

dnf_depends() {
  info "install dependencies with dnf"
  sudo dnf check-update

  install "sudo dnf group install -y \"Development Tools\"" "gcc"
  install "sudo dnf group install -y \"Development Tools\"" "make"
  install "sudo dnf install -y autoconf" "autoconf"
  install "sudo dnf install -y automake" "automake"
  install "sudo dnf install -y pkg-config" "pkg-config"
  install "sudo dnf install -y cmake" "cmake"
  install "install_golang" "go"
  sudo dnf install -y openssl-devel openssl openssh-clients openssh-server

  install "sudo dnf install -y git" "git"
  install "sudo dnf install -y curl" "curl"
  install "sudo dnf install -y wget" "wget"
  install "install_lazygit_for_dnf" "lazygit"
  install "install_fzf" "fzf"
  install "install_moar" "moar"

  install "sudo dnf install -y gzip" "gzip"
  install "sudo dnf install -y p7zip" "7z"
  install "sudo dnf install -y unzip" "unzip"

  install "sudo dnf install -y xsel" "xsel"
  install "sudo dnf install -y xclip" "xclip"

  install "sudo dnf install -y python3 python3-devel python3-pip python3-docutils" "python3"

  install "sudo dnf install -y nodejs npm" "node"

  install "sudo dnf install -y pipx" "pipx"
  pipx ensurepath
  sudo pipx ensurepath --global

  install "sudo dnf install -y zsh" "zsh"
  sudo chsh -s $(which zsh) $USER
}

# dnf }

# brew {

brew_depends() {
  info "install dependencies with brew"

  install "xcode-select --install" "clang"
  install "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"" "brew"
  brew update

  install "brew install autoconf" "autoconf"
  install "brew install automake" "automake"
  install "brew install pkg-config" "pkg-config"
  install "brew install cmake" "cmake"
  install "brew install go" "go"
  brew install openssl openssh

  install "brew install git" "git"
  install "brew install curl" "curl"
  install "brew install wget" "wget"
  install "brew install jesseduffield/lazygit/lazygit" "lazygit"
  install "brew install fzf" "fzf"
  install "brew install moar" "moar"

  install "brew install gzip" "gzip"
  install "brew install p7zip" "7z"
  install "brew install unzip" "unzip"

  install "brew install python3" "python3"
  install "brew install node" "node"

  install "brew install pipx" "pipx"
  pipx ensurepath
  sudo pipx ensurepath --global

  install "brew install zsh" "zsh"
  sudo chsh -s $(which zsh) $USER
}

# brew }

# install dependencies

case "$OS" in
Linux)
  if [ -f "/etc/arch-release" ] || [ -f "/etc/artix-release" ]; then
    pacman_depends
  elif [ -f "/etc/fedora-release" ] || [ -f "/etc/redhat-release" ]; then
    dnf_depends
  elif [ -f "/etc/gentoo-release" ]; then
    # emerge
    info "gentoo is not supported, exit..."
    exit 1
  else
    apt_depends
  fi
  ;;
FreeBSD)
  # pkg
  info "FreeBSD is not supported, exit..."
  exit 1
  ;;
NetBSD)
  # pkgin
  info "NetBSD is not supported, exit..."
  exit 1
  ;;
OpenBSD)
  # pkg_add
  info "OpenBSD is not supported, exit..."
  exit 1
  ;;
Darwin)
  brew_depends
  ;;
*)
  info "$OS is not supported, exit..."
  exit 1
  ;;
esac

# git config
git config --global user.email "linrongbin16@outlook.com"
git config --global user.name "linrongbin16"
git config --global pull.rebase false
git config --global init.defaultBranch main

# rust
install "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y" "cargo"
install "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y" "rustc"
if [ -f $HOME/.cargo/env ]; then
  . "$HOME/.cargo/env"
fi
install "curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash" "cargo-binstall"
install "cargo binstall -y --force fd-find" "fd"
install "cargo binstall -y --force ripgrep" "rg"
install "cargo binstall -y --force bat" "bat"
install "cargo binstall -y --force eza" "eza"
install "cargo binstall -y --force git-delta" "delta"
install "cargo binstall -y --force zoxide" "zoxide"
install "cargo install bob-nvim" "bob"
export PATH="$PATH:$HOME/.local/share/bob/nvim-bin"
install "bob use stable" "nvim"

# node.js
sudo npm install --silent -g trash-cli

# pure prompt
install_pure_for_zsh() {
  mkdir -p "$HOME/.zsh"
  if [ -d "$HOME/.zsh/pure" ]; then
    rm -rf "$HOME/.zsh/pure"
  fi
  git clone --depth=1 https://github.com/sindresorhus/pure.git "$HOME/.zsh/pure"
}

install_pure_for_zsh

# atuin
curl --proto '=https' --tlsv1.2 -LsSf https://setup.atuin.sh | sh

# mise
curl https://mise.run | sh

# kitty config
mkdir -p $HOME/.config/kitty
if [ ! -f ~/.config/kitty/kitty.conf ]; then
  cp $HOME/.dotfiles/kitty.conf $HOME/.config/kitty/kitty.conf
fi

# alacritty
mkdir -p $HOME/.config/alacritty
if [ ! -f ~/.config/alacritty/alacritty.toml ]; then
  cp $HOME/.dotfiles/alacritty.toml $HOME/.config/alacritty/alacritty.toml
fi
if [ -d "$HOME/.config/alacritty/themes" ]; then
  rm -rf "$HOME/.config/alacritty/themes"
fi
git clone --depth=1 https://github.com/alacritty/alacritty-theme ~/.config/alacritty/themes

echo '' >>~/.zshrc
echo '# dotfiles ' >>~/.zshrc
echo '[ -f ~/.dotfiles/dotfiles.zsh ] && source ~/.dotfiles/dotfiles.zsh' >>~/.zshrc
