#!/bin/bash

# set -x

OS="$(uname -s)"

GITHUB_ACTIONS=0

for i in "$@"; do
  case $i in
  --github-actions)
    GITHUB_ACTIONS=1
    ;;
  *) ;;
  esac
done

# utils {

info() {
  local content="$*"
  printf "[dotfiles] - %s\n" "$content"
}

skip_info() {
  local old="$IFS"
  IFS='/'
  local target="'$*'"
  info "$target already exist, skip..."
  IFS=$old
}

install() {
  local command="$1"
  local target="$2"
  if ! type "$target" >/dev/null 2>&1; then
    info "install '$target' with: '$command'"
    eval "$command"
  else
    skip_info $target
  fi
}

# utils }

# apt {

install_nvim_for_apt() {
  sudo snap install nvim --classic
}

install_nodejs_for_apt() {
  # see: https://github.com/nodesource/distributions
  info "install nodejs-lts from NodeSource"
  sudo apt-get install -y curl
  curl -fsSL https://deb.nodesource.com/setup_lts.x -o nodesource_setup.sh
  sudo -E bash nodesource_setup.sh
  sudo apt-get -qq update
  sudo apt-get -qq -y install nodejs
}

install_git_for_apt() {
  sudo apt-add-repository ppa:git-core/ppa
  sudo apt-get -q -q -y update
  install "sudo apt-get install -q -y git" "git"
}

install_golang_for_apt() {
  git clone --depth=1 https://github.com/kerolloz/go-installer
  export GOROOT="$HOME/.go" # where go is installed
  export GOPATH="$HOME/go"  # user workspace
  bash ./go-installer/go.sh
  export PATH="$PATH:$GOROOT/bin"
  export PATH="$PATH:$GOPATH/bin"
}

install_lazygit_for_apt() {
  go install github.com/jesseduffield/lazygit@latest
}

install_moar_for_apt() {
  go install github.com/walles/moar@latest
}

install_fzf_for_apt() {
  git clone --depth=1 https://github.com/junegunn/fzf
  bash ./fzf/install --bin
  sudo mv ./fzf/bin/fzf /usr/local/bin/fzf
  rm -rf ./fzf
}

apt_depends() {
  info "install dependencies with apt"
  sudo apt-get -q -y update

  install "sudo apt-get install -q -y build-essential" "gcc"
  install "sudo apt-get install -q -y build-essential" "make"
  install "sudo apt-get install -q -y autoconf" "autoconf"
  install "sudo apt-get install -q -y automake" "automake"
  install "sudo apt-get install -q -y pkg-config" "pkg-config"
  install "sudo apt-get install -q -y cmake" "cmake"
  install "install_golang_for_apt" "go"

  install "install_git_for_apt" "git"
  install "sudo apt-get install -q -y curl" "curl"
  install "sudo apt-get install -q -y wget" "wget"
  install "install_lazygit_for_apt" "lazygit"
  install "install_moar_for_apt" "moar"
  install "install_fzf_for_apt" "fzf"

  install "sudo apt-get install -q -y gzip" "gzip"
  install "sudo apt-get install -q -y p7zip" "7z"
  install "sudo apt-get install -q -y unzip" "unzip"

  install "sudo apt-get install -q -y xsel" "xsel"
  install "sudo apt-get install -q -y xclip" "xclip"

  install "sudo apt-get install -q -y python3 python3-dev python3-venv python3-pip python3-docutils" "python3"
  install "sudo apt-get install -q -y python3 python3-dev python3-venv python3-pip python3-docutils" "pip3"

  install "install_nodejs_for_apt" "node"
  install "install_nodejs_for_apt" "npm"

  install "install_nvim_for_apt" "nvim"
  install "sudo apt-get install -q -y zsh" "zsh"
}

# apt }

# pacman {

pacman_depends() {
  info "install dependencies with pacman"
  sudo pacman -Syy

  install "yes | sudo pacman -S base-devel" "gcc"
  install "yes | sudo pacman -S base-devel" "make"
  install "yes | sudo pacman -S autoconf" "autoconf"
  install "yes | sudo pacman -S automake" "automake"
  install "yes | sudo pacman -S pkg-config" "pkg-config"
  install "yes | sudo pacman -S cmake" "cmake"
  install "yes | sudo pacman -S go" "go"

  install "yes | sudo pacman -S git" "git"
  install "yes | sudo pacman -S curl" "curl"
  install "yes | sudo pacman -S wget" "wget"
  install "yes | sudo pacman -S lazygit" "lazygit"
  install "yes | sudo pacman -S moar" "moar"
  install "yes | sudo pacman -S fzf" "fzf"

  install "yes | sudo pacman -S unzip" "unzip"
  install "yes | sudo pacman -S gzip" "gzip"
  install "yes | sudo pacman -S p7zip" "7z"
  install "yes | sudo pacman -S atool" "atool"

  install "yes | sudo pacman -S xsel" "xsel"
  install "yes | sudo pacman -S xclip" "xclip"

  install "yes | sudo pacman -S python python-pip" "python3"

  install "yes | sudo pacman -S nodejs npm" "node"

  install "yes | sudo pacman -S neovim" "nvim"
  install "yes | sudo pacman -S zsh" "zsh"
}

# pacman }

# dnf {

install_golang_for_dnf() {
  git clone --depth=1 https://github.com/kerolloz/go-installer
  export GOROOT="$HOME/.go" # where go is installed
  export GOPATH="$HOME/go"  # user workspace
  bash ./go-installer/go.sh
  export PATH="$PATH:$GOROOT/bin"
  export PATH="$PATH:$GOPATH/bin"
}

install_lazygit_for_dnf() {
  sudo dnf copr enable atim/lazygit -y
  sudo dnf install -y lazygit
}

install_moar_for_dnf() {
  install_moar_for_apt
}

dnf_depends() {
  info "install dependencies with dnf"
  sudo dnf check-update

  install "sudo dnf group install -y \"Development Tools\"" "gcc"
  install "sudo dnf group install -y \"Development Tools\"" "make"
  install "sudo dnf install -y autoconf" "autoconf"
  install "sudo dnf install -y automake" "automake"
  install "sudo dnf install -y pkg-config" "pkg-config"
  install "sudo dnf install -y cmake" "cmake"
  install "install_golang_for_dnf" "go"

  install "sudo dnf install -y git" "git"
  install "sudo dnf install -y curl" "curl"
  install "sudo dnf install -y wget" "wget"
  install "install_lazygit_for_dnf" "lazygit"
  install "install_moar_for_dnf" "moar"
  install "sudo dnf install -y fzf" "fzf"

  install "sudo dnf install -y gzip" "gzip"
  install "sudo dnf install -y p7zip" "7z"
  install "sudo dnf install -y unzip" "unzip"

  install "sudo dnf install -y xsel" "xsel"
  install "sudo dnf install -y xclip" "xclip"

  install "sudo dnf install -y python3 python3-devel python3-pip python3-docutils" "python3"

  install "sudo dnf install -y nodejs npm" "node"

  install "sudo dnf install -y neovim" "nvim"
  install "sudo dnf install -y zsh" "zsh"
}

# dnf }

# brew {

brew_depends() {
  info "install dependencies with brew"

  install "xcode-select --install" "clang"
  install "/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"" "brew"
  brew update

  install "brew install autoconf" "autoconf"
  install "brew install automake" "automake"
  install "brew install pkg-config" "pkg-config"
  install "brew install cmake" "cmake"
  install "brew install go" "go"

  install "brew install git" "git"
  install "brew install curl" "curl"
  install "brew install wget" "wget"
  install "brew install jesseduffield/lazygit/lazygit" "lazygit"
  install "brew install moar" "moar"
  install "brew install fzf" "fzf"

  install "brew install gzip" "gzip"
  install "brew install p7zip" "7z"
  install "brew install unzip" "unzip"

  install "brew install python3" "python3"
  install "brew install node" "node"

  install "brew install neovim" "nvim"
  install "brew install zsh" "zsh"
}

# brew }

# install dependencies

case "$OS" in
Linux)
  if [ -f "/etc/arch-release" ] || [ -f "/etc/artix-release" ]; then
    pacman_depends
  elif [ -f "/etc/fedora-release" ] || [ -f "/etc/redhat-release" ]; then
    dnf_depends
  elif [ -f "/etc/gentoo-release" ]; then
    # emerge
    info "gentoo is not supported, exit..."
    exit 1
  else
    apt_depends
  fi
  ;;
FreeBSD)
  # pkg
  info "FreeBSD is not supported, exit..."
  exit 1
  ;;
NetBSD)
  # pkgin
  info "NetBSD is not supported, exit..."
  exit 1
  ;;
OpenBSD)
  # pkg_add
  info "OpenBSD is not supported, exit..."
  exit 1
  ;;
Darwin)
  brew_depends
  ;;
*)
  info "$OS is not supported, exit..."
  exit 1
  ;;
esac

# git config
git config --global user.email "linrongbin16@outlook.com"
git config --global user.name "linrongbin16"
git config --global pull.rebase false
git config --global init.defaultBranch main

# rust
install "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y" "cargo"
install "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y" "rustc"
if [ -f $HOME/.cargo/env ]; then
  . "$HOME/.cargo/env"
fi
install "cargo install fd-find" "fd"
install "cargo install ripgrep" "rg"
install "cargo install --locked bat" "bat"
install "cargo install eza" "eza"
install "cargo install git-delta" "delta"
install "cargo install --locked zoxide" "zoxide"

# python3

python_has_pep668=$(python3 -c 'import sys; major=sys.version_info.major; minor=sys.version_info.minor; micro=sys.version_info.micro; r1=major >= 3 and minor > 11; r2=major >= 3 and minor == 11 and micro >= 1; print(1 if r1 or r2 else 0)')
if [ $GITHUB_ACTIONS -eq 1 ]; then
  python3 --version
fi

if [[ $python_has_pep668 -eq 1 ]]; then
  python3 -m pip install click --user --break-system-packages
  python3 -m pip install tinydb --user --break-system-packages
  python3 -m pip install pynvim --user --break-system-packages
else
  python3 -m pip install click --user
  python3 -m pip install tinydb --user
  python3 -m pip install pynvim --user
fi

# node.js
sudo npm install --silent -g neovim
sudo npm install --silent -g trash-cli

# patched font
get_nerdfont_latest_release_tag() {
  local org="$1"
  local repo="$2"
  local uri="https://github.com/$org/$repo/releases/latest"
  curl -f -L $uri | grep "href=\"/$org/$repo/releases/tag" | grep -Eo 'href="/[a-zA-Z0-9#~.*,/!?=+&_%:-]*"' | head -n 1 | cut -d '"' -f2 | cut -d "/" -f6
}

download_font_for_linux() {
  mkdir -p ~/.local/share/fonts && cd ~/.local/share/fonts
  local org=$1
  local repo=$2
  local font_file=$3
  local font_version=$(get_nerdfont_latest_release_tag $org $repo)
  local font_url="https://github.com/$org/$repo/releases/download/$font_version/$font_file"
  info "install $font_file($font_version) nerd fonts from github"
  if [ -f $font_file ]; then
    rm -rf $font_file
  fi
  curl -L $font_url -o $font_file
  if [ $? -ne 0 ]; then
    info "failed to download $font_file, skip..."
  else
    unzip -o $font_file
    info "install $font_file($font_version) nerd font from github - done"
  fi
  sudo fc-cache -f -v
}

depends_nerdfont_linux() {
  download_font_for_linux "ryanoasis" "nerd-fonts" "$1"
}

depends_monaco_nerdfont_linux() {
  download_font_for_linux "thep0y" "monaco-nerd-font" "MonacoNerdFont.zip"
  download_font_for_linux "thep0y" "monaco-nerd-font" "MonacoNerdFontMono.zip"
}

download_font_for_macos() {
  cd ~/Library/Fonts
  local org=$1
  local repo=$2
  local font_file=$3
  local font_version=$(get_nerdfont_latest_release_tag $org $repo)
  local font_url="https://github.com/$org/$repo/releases/download/$font_version/$font_file"
  info "install $font_file($font_version) nerd fonts from github"
  if [ -f $font_file ]; then
    rm -rf $font_file
  fi
  curl -L $font_url -o $font_file
  if [ $? -ne 0 ]; then
    info "failed to download $font_file, skip..."
  else
    unzip -o $font_file
    rm $font_file
    info "install $font_file($font_version) nerd font from github - done"
  fi
}

depends_monaco_nerdfont_macos() {
  download_font_for_macos "thep0y" "monaco-nerd-font" "MonacoNerdFont.zip"
  download_font_for_macos "thep0y" "monaco-nerd-font" "MonacoNerdFontMono.zip"
}

depends_nerdfont_macos() {
  local font_name=$1
  info "install $font_name nerd fonts with brew"
  brew install $font_name
}

if [ "$OS" = "Darwin" ]; then
  depends_monaco_nerdfont_macos
  depends_nerdfont_macos "font-hack-nerd-font"
  depends_nerdfont_macos "font-d2coding-nerd-font"
  depends_nerdfont_macos "font-code-new-roman-nerd-font"
  depends_nerdfont_macos "font-sauce-code-pro-nerd-font"
else
  depends_monaco_nerdfont_linux
  depends_nerdfont_linux "Hack.zip"
  depends_nerdfont_linux "D2Coding.zip"
  depends_nerdfont_linux "CodeNewRoman.zip"
  depends_nerdfont_linux "SourceCodePro.zip"
fi

# ghostty config
if [ ! -f ~/.config/ghostty/config ]; then
  mkdir -p $HOME/.config/ghostty
  cp $HOME/.dotfiles/ghostty $HOME/.config/ghostty/config
fi

# kitty config
if [ ! -f ~/.config/kitty/kitty.conf ]; then
  mkdir -p $HOME/.config/kitty
  cp $HOME/.dotfiles/kitty.conf $HOME/.config/kitty/kitty.conf
fi

# zsh plugins
if [ ! -d "$HOME/.zsh" ]; then
  mkdir -p "$HOME/.zsh"
fi
# pure prompt theme
if [ -d "$HOME/.zsh/pure" ]; then
  rm -rf "$HOME/.zsh/pure"
fi
git clone --depth=1 https://github.com/sindresorhus/pure.git "$HOME/.zsh/pure"
# fzf-tab
if [ -d "$HOME/.zsh/fzf-tab" ]; then
  rm -rf "$HOME/.zsh/fzf-tab"
fi
git clone --depth=1 https://github.com/Aloxaf/fzf-tab "$HOME/.zsh/fzf-tab"

echo '' >>~/.zshrc
echo '# dotfiles ' >>~/.zshrc
echo '[ -f ~/.dotfiles/dotfiles.zsh ] && source ~/.dotfiles/dotfiles.zsh' >>~/.zshrc
